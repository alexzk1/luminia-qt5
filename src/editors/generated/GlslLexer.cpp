#line 1 "/home/alex/Work/OpenSource/luminia-qt5/src/editors/generated/GlslLexer.cpp"

#line 3 "/home/alex/Work/OpenSource/luminia-qt5/src/editors/generated/GlslLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer GLSLFlexLexer

#ifdef yyalloc
#define GLSLalloc_ALREADY_DEFINED
#else
#define yyalloc GLSLalloc
#endif

#ifdef yyrealloc
#define GLSLrealloc_ALREADY_DEFINED
#else
#define yyrealloc GLSLrealloc
#endif

#ifdef yyfree
#define GLSLfree_ALREADY_DEFINED
#else
#define yyfree GLSLfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 59
#define YY_END_OF_BUFFER 60
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[444] =
    {   0,
       39,   39,   60,   58,   59,   38,   58,   59,   38,   59,
       39,   58,   59,   58,   59,   54,   58,   59,   39,   58,
       59,   53,   58,   59,   39,   58,   59,   39,   58,   59,
       56,   58,   59,   39,   58,   59,   49,   50,   55,   58,
       59,   49,   50,   55,   58,   59,   49,   50,   55,   58,
       59,   39,   58,   59,   39,   58,   59,   54,   58,   59,
       55,   58,   59,   55,   58,   59,   39,   58,   59,   54,
       58,   59,   55,   58,   59,   55,   58,   59,   55,   58,
       59,   55,   58,   59,   55,   58,   59,   55,   58,   59,
       55,   58,   59,   55,   58,   59,   55,   58,   59,   55,

       58,   59,   55,   58,   59,   55,   58,   59,   55,   58,
       59,   55,   58,   59,   55,   58,   59,   55,   58,   59,
       55,   58,   59,   55,   58,   59,   55,   58,   59,   55,
       58,   59,   39,   58,   59,   58,   59,   37,   54,   58,
       59,   39,   25,   40,   36,   49,   50,   51,   43,   35,
       34,   50,   49,   50,   55,   55,   50,   55,   49,   55,
       55,   55,   45,   45,   44,   52,   55,   55,   42,   55,
       55,   55,   55,   55,   55,   55,   55,   12,   55,   25,
       55,   55,   55,   55,   55,   55,   18,   55,   20,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   41,   57,   37,
       49,   50,   50,   49,   51,   34,   50,   55,   55,   46,
       46,   52,   46,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   13,   55,   47,   55,   55,16417,
       55,   55,   55,   55,   55,   21,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   57,
       55,   55,   55,   55,   55,   16,   55,   55,   55,   55,
       55,   55,   19,   55,   55,    7,   55,   47,   55, 8225,
     8225,   52, 8225,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   48,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   10,   55,   55,
        2,   55,   55,   55,   55,   22,   55,   55,   55,   55,
       55,   55,   55,   32,   32,   52,   32,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   31,   31,   52,
       31,   14,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,    5,   55,   55,   55,
       55,   23,   55,   55,    8,   55,   28,   55,   15,   55,
       55,   55,   55,   29,   55,   29,   29,   52,   29,   55,
       55,   55,   17,   55,   26,   55, 8225,   55,   55,   55,
       55,   55,   55,   55,    3,   55,    4,   55,   29,   30,

       55,   55,    6,   55,   11,   55,   55,   55,   55,   55,
       55,   55,   55,    1,   55,   24,   55,   55,   55,   55,
       27,   55,   55,   55,   55,   55,   55,   29,   30,   29,
       30,   52,   29,   30,   55,   55,   55,   55,   55,   55,
       30,    9,   55
    } ;

static const flex_int16_t yy_accept[309] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   14,   16,   19,
       22,   25,   28,   31,   34,   37,   42,   47,   52,   55,
       58,   61,   64,   67,   70,   73,   76,   79,   82,   85,
       88,   91,   94,   97,  100,  103,  106,  109,  112,  115,
      118,  121,  124,  127,  130,  133,  136,  138,  142,  143,
      144,  145,  146,  148,  149,  150,  151,  152,  153,  156,
      157,  159,  161,  162,  163,  164,  165,  166,  166,  167,
      167,  168,  168,  169,  170,  171,  172,  173,  174,  175,
      176,  177,  178,  180,  182,  183,  184,  185,  186,  187,
      189,  191,  192,  193,  194,  195,  196,  197,  198,  199,

      200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
      210,  211,  213,  214,  215,  216,  217,  218,  219,  220,
      221,  223,  224,  225,  226,  227,  228,  229,  230,  231,
      232,  233,  234,  235,  237,  238,  239,  241,  242,  243,
      244,  245,  246,  248,  249,  250,  251,  252,  253,  254,
      255,  256,  257,  258,  259,  260,  261,  262,  263,  264,
      265,  266,  268,  269,  270,  271,  272,  273,  275,  276,
      278,  279,  280,  281,  283,  284,  285,  286,  287,  288,
      289,  290,  291,  292,  293,  294,  295,  296,  297,  298,
      300,  301,  302,  303,  304,  305,  306,  307,  308,  310,

      311,  313,  314,  315,  316,  318,  319,  320,  321,  322,
      323,  324,  325,  327,  328,  329,  330,  331,  332,  333,
      334,  335,  336,  337,  338,  339,  341,  342,  344,  345,
      346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
      356,  357,  359,  360,  361,  362,  364,  365,  367,  369,
      371,  372,  373,  374,  375,  376,  377,  379,  380,  381,
      382,  383,  385,  387,  389,  390,  391,  392,  393,  394,
      395,  397,  399,  401,  402,  403,  405,  407,  408,  409,
      410,  411,  412,  413,  414,  416,  418,  419,  420,  421,
      423,  424,  425,  426,  427,  428,  430,  433,  435,  436,

      437,  438,  439,  440,  441,  442,  444,  444
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    4,    7,    1,    8,
        9,   10,   11,   12,   11,   13,   14,   15,   16,   17,
       18,   19,   15,   15,   15,   15,   15,   20,   12,   21,
       22,   23,   24,   12,   25,   26,   27,   28,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   30,   31,   29,   29,   29,   29,   29,   29,   29,
        9,   12,    9,   32,   33,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,   29,   43,   44,   45,   46,
       47,   48,   29,   49,   50,   51,   52,   53,   54,   55,
       56,   29,    9,   57,    9,   12,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   58,    1,
       59,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   60,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[61] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    1,    4,    4,    4,    4,    4,    1,
        1,    1,    1,    1,    5,    5,    5,    5,    5,    5,
        5,    1,    6,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[316] =
    {   0,
        0,  627,  632,  982,  982,  982,  609,  582,  982,   54,
      982,   48,   49,   50,   59,   67,  107,  601,   53,   55,
      608,  159,  575,   57,  219,  575,   38,   54,   52,   49,
       61,   54,  577,   64,   70,   73,  577,   61,  574,  584,
       82,  572,   92,   94,   89,   74,  561,    0,  982,  982,
      982,  982,  231,  606,  982,  982,    0,  219,  590,  604,
      603,  601,  116,  232,  591,  982,  982,  604,  603,  139,
        0,  283,  571,  982,  558,  570,  564,  551,  554,  553,
      559,  529,    0,    0,  527,  532,  541,  525,  540,    0,
       97,  538,  515,  519,  521,  517,  529,  515,  520,  517,

      514,  520,  509,  514,  517,  509,  521,  514,  982,  496,
        0,    0,  982,  982,  540,    0,  283,  259,  242,  248,
        0,    0,  513,  502,  516,  511,  497,  102,  508,  505,
      502,  489,  487,    0,  343,  467,  403,  484,  472,  469,
      235,  477,    0,  478,  461,  464,  464,  458,  458,  470,
      456,  467,  449,  242,  460,  445,  260,  297,  464,  459,
      457,    0,  450,  447,  455,  444,  460,    0,  455,    0,
      463,  441,  483,  482,    0,  442,  444,  435,  432,  432,
      427,  523,  429,  417,  409,  413,  404,  418,  417,    0,
      405,  409,  583,  412,  298,  261,  400,  413,    0,  400,

        0,  400,  401,  395,    0,  396,  394,  398,  397,  393,
      385,  426,  425,    0,  299,  382,  381,  384,  391,  387,
      371,  380,  371,  373,  410,  391,    0,    0,  258,  643,
      703,  346,  355,  344,  344,  357,  349,  358,  354,  356,
      351,    0,  333,  339,  344,    0,  336,    0,    0,    0,
      339,  343,  763,  982,  102,  374,  373,    0,  329,  342,
      340,    0,    0,    0,  326,  330,  325,  335,  325,  303,
        0,    0,  982,  300,  333,    0,    0,  319,  308,  333,
      322,  334,  307,  323,    0,    0,  330,  287,  287,    0,
      823,  302,  314,  296,  287,  320,  273,    0,  231,  269,

      230,   96,  883,  101,  982,    0,  982,  941,  946,  952,
      958,  964,  967,  971,  975
    } ;

static const flex_int16_t yy_def[316] =
    {   0,
      307,    1,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  308,  308,   17,  307,  307,
      307,  307,   22,  307,  309,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,  307,  307,  310,  307,  307,
      307,  307,  307,  307,  307,  307,  311,  307,   17,  308,
      308,  308,  308,  308,  307,  307,  307,  312,  312,  313,
       22,  309,   22,  307,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,  307,  307,
      310,   53,  307,  307,  307,  311,  307,  308,  308,  313,
      120,  314,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,  315,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,  307,  308,  308,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
      315,   22,  312,  312,  120,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,  308,  308,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,  312,  312,  120,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,  312,  312,  120,   22,  308,  308,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,  182,   22,   22,   22,   22,   22,   22,   22,
       22,   22,  308,  307,  308,  312,  312,  120,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,  307,  308,   22,   22,   22,   22,   22,   22,
       22,   22,   22,  308,   22,   22,   22,   22,   22,   22,
       22,   22,  308,   22,   22,  312,  312,  120,   22,  308,

       22,   22,  308,   22,  307,   22,    0,  307,  307,  307,
      307,  307,  307,  307,  307
    } ;

static const flex_int16_t yy_nxt[1043] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   11,   12,
       13,    9,   14,   15,   16,   17,   18,   16,   16,    9,
       19,    7,   20,   21,   22,   23,   22,   22,   22,   22,
       22,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   22,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   22,   22,   46,    4,    4,   47,
       51,   52,   54,   53,   53,   53,   53,   53,   56,   49,
       49,   55,   57,   65,   49,   49,   49,   66,   49,   58,
       49,   59,   59,   59,   59,   59,   76,   78,   74,   81,
       77,   79,   85,   82,   86,   49,   84,   89,   83,   84,

       80,   84,   90,   93,   87,   61,   94,   88,   84,   91,
       62,   84,   96,   92,  307,   99,   77,   84,   62,   58,
       84,   59,   59,   59,   59,   59,  100,  106,  307,  108,
      109,  107,  101,  104,   63,  102,   84,  105,  306,   84,
      118,   92,  274,  136,   77,   61,  121,  137,  304,  138,
       62,  164,  165,  122,  122,  122,  122,  122,   62,   68,
       68,   68,   68,   68,   68,   68,   69,   68,   68,   68,
       68,   70,   68,   71,   71,   71,   71,   71,   68,   68,
       68,   68,   68,   71,   71,   71,   71,   71,   71,   71,
       68,   72,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   69,   68,   68,   68,
       68,   70,   68,  117,  117,  117,  117,  117,   68,   68,
       68,   68,   68,   58,  307,  112,  112,  112,  112,  112,
       68,  182,  182,  182,  307,  121,  118,  113,  193,  193,
      193,  119,  122,  122,  122,  122,  122,  231,  291,  113,
      307,  307,  307,  307,  114,   68,   68,   68,   68,  158,
       69,  307,  114,   68,   68,   68,   68,   68,   68,   68,
       69,   68,   68,   68,   68,   70,   68,  117,  117,  117,

      117,  117,   68,   68,   68,   68,   68,  157,  195,  307,
      307,  230,  307,  253,   68,  243,  243,  243,  282,  282,
      282,  113,  303,  287,  287,  287,  307,   69,  302,  283,
      301,  229,  196,  284,  288,  307,  299,  295,  294,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       69,   68,   68,   68,   68,   70,   68,  231,  292,  293,
      300,  291,   68,   68,   68,   68,   68,  290,  289,  286,
      285,  281,  280,  279,   68,  278,  264,  277,  276,  275,
       69,   69,  272,  271,  270,  269,  268,   71,  267,  266,
      264,  265,  264,  263,  262,  261,  260,  259,   69,   68,

       68,   68,   68,  173,  173,  173,  173,  173,  173,  173,
      174,  173,  173,  173,  173,  175,  173,   69,  252,  251,
      250,  249,  173,  173,  173,  173,  173,  248,  247,  246,
      245,  244,   69,   69,  173,  242,  241,  176,  240,  239,
      238,  177,  237,  236,  235,  234,  233,  232,  231,  228,
      224,  223,  222,  221,  220,  178,  219,  218,  217,  173,
      173,  173,  173,   68,   68,   68,   68,   68,   68,   68,
       69,   68,   68,   68,   68,   70,   68,  216,  211,  210,
      209,  208,   68,   68,   68,   68,   68,  207,  206,   69,
       69,  205,  190,  204,   68,  203,  202,  201,  200,  199,

      198,  197,  156,  194,  192,  191,  137,  190,  189,  188,
      187,  186,  185,  184,  183,  181,  180,  179,  172,   68,
       68,   68,   68,  212,  212,  212,  212,  212,  212,  212,
      213,  212,  212,  212,  212,  214,  212,  170,  169,  168,
      167,  166,  212,  212,  212,  212,  212,  163,  162,  161,
      160,  159,  115,  156,  212,  155,  154,  153,  152,  151,
      150,  149,  148,  147,  146,  145,  144,  143,  142,  141,
      140,  139,  135,  134,  133,  132,  131,  215,  130,  212,
      212,  212,  212,  225,  225,  225,  225,  225,  225,  225,
      226,  225,  225,  225,  225,  227,  225,  129,  128,  127,

      126,  107,  225,  225,  225,  225,  225,  125,  124,  123,
       69,   69,   66,  307,  225,  307,  307,   60,  115,  110,
      103,   98,   97,   95,   84,   75,   73,   67,   64,   50,
       49,  307,   48,  307,  307,  307,  307,  307,  307,  225,
      225,  225,  225,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  307,  307,  307,
      307,  307,  254,  254,  254,  254,  254,  307,  307,  307,
      307,  307,  307,  255,  254,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  254,

      254,  254,  254,  256,  256,  256,  256,  256,  256,  256,
      257,  256,  256,  256,  256,  258,  256,  307,  307,  307,
      307,  307,  256,  256,  256,  256,  256,  307,  307,  307,
      307,  307,  307,  307,  256,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  256,
      256,  256,  256,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  307,  307,  307,
      307,  307,  273,  273,  273,  273,  273,  307,  307,  307,
      307,  307,  307,  307,  273,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  273,
      273,  273,  273,  296,  296,  296,  296,  296,  296,  296,
      297,  296,  296,  296,  296,  298,  296,  307,  307,  307,
      307,  307,  296,  296,  296,  296,  296,  307,  307,  307,
      307,  307,  307,  307,  296,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  296,
      296,  296,  296,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  307,  307,  307,

      307,  307,  305,  305,  305,  305,  305,  307,  307,  307,
      307,  307,  307,  307,  305,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  305,
      305,  305,  305,   60,   60,   60,   72,   72,   72,   72,
       72,   72,  111,  307,  111,  111,  111,  111,  116,  307,
      116,  116,  116,  116,   68,   68,   68,  120,  120,  120,
      120,  122,  122,  122,  122,  171,  171,  171,  171,  171,
      171,    3,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307
    } ;

static const flex_int16_t yy_chk[1043] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       10,   12,   14,   13,   13,   13,   13,   13,   15,   12,
       13,   14,   15,   19,   19,   10,   20,   20,   24,   16,
       15,   16,   16,   16,   16,   16,   27,   28,   24,   29,
       27,   28,   30,   29,   31,   46,   30,   32,   29,   29,

       28,   32,   34,   35,   31,   16,   36,   31,   38,   34,
       16,   34,   38,   34,  255,   41,   34,   35,   16,   17,
       36,   17,   17,   17,   17,   17,   41,   44,   63,   45,
       46,   44,   41,   43,   17,   41,   45,   43,  304,   43,
       63,   43,  255,   91,   43,   17,   70,   91,  302,   91,
       17,  128,  128,   70,   70,   70,   70,   70,   17,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,

       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   58,   58,   58,   58,   58,   25,   25,
       25,   25,   25,   53,   64,   53,   53,   53,   53,   53,
       25,  141,  141,  141,  119,  120,   64,   58,  154,  154,
      154,   64,  120,  120,  120,  120,  120,  301,  299,   53,
      229,  118,  157,  196,   53,   25,   25,   25,   25,  119,
      297,  300,   53,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,  117,  117,  117,

      117,  117,   72,   72,   72,   72,   72,  118,  157,  158,
      195,  196,  274,  229,   72,  215,  215,  215,  270,  270,
      270,  117,  300,  279,  279,  279,  293,  296,  295,  270,
      294,  195,  158,  274,  279,  284,  292,  289,  288,   72,
       72,   72,   72,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  287,  283,  284,
      293,  282,  135,  135,  135,  135,  135,  281,  280,  278,
      275,  269,  268,  267,  135,  266,  265,  261,  260,  259,
      257,  256,  252,  251,  247,  245,  244,  243,  241,  240,
      239,  238,  237,  236,  235,  234,  233,  232,  226,  135,

      135,  135,  135,  137,  137,  137,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  137,  225,  224,  223,
      222,  221,  137,  137,  137,  137,  137,  220,  219,  218,
      217,  216,  213,  212,  137,  211,  210,  137,  209,  208,
      207,  137,  206,  204,  203,  202,  200,  198,  197,  194,
      192,  191,  189,  188,  187,  137,  186,  185,  184,  137,
      137,  137,  137,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  183,  181,  180,
      179,  178,  171,  171,  171,  171,  171,  177,  176,  174,
      173,  172,  169,  167,  171,  166,  165,  164,  163,  161,

      160,  159,  156,  155,  153,  152,  151,  150,  149,  148,
      147,  146,  145,  144,  142,  140,  139,  138,  136,  171,
      171,  171,  171,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  133,  132,  131,
      130,  129,  182,  182,  182,  182,  182,  127,  126,  125,
      124,  123,  115,  110,  182,  108,  107,  106,  105,  104,
      103,  102,  101,  100,   99,   98,   97,   96,   95,   94,
       93,   92,   89,   88,   87,   86,   85,  182,   82,  182,
      182,  182,  182,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,   81,   80,   79,

       78,   77,  193,  193,  193,  193,  193,   76,   75,   73,
       69,   68,   65,   62,  193,   61,   60,   59,   54,   47,
       42,   40,   39,   37,   33,   26,   23,   21,   18,    8,
        7,    3,    2,    0,    0,    0,    0,    0,    0,  193,
      193,  193,  193,  230,  230,  230,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,    0,    0,    0,
        0,    0,  230,  230,  230,  230,  230,    0,    0,    0,
        0,    0,    0,  230,  230,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  230,

      230,  230,  230,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  231,  231,  231,    0,    0,    0,
        0,    0,  231,  231,  231,  231,  231,    0,    0,    0,
        0,    0,    0,    0,  231,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  231,
      231,  231,  231,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,    0,    0,    0,
        0,    0,  253,  253,  253,  253,  253,    0,    0,    0,
        0,    0,    0,    0,  253,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  253,
      253,  253,  253,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,    0,    0,    0,
        0,    0,  291,  291,  291,  291,  291,    0,    0,    0,
        0,    0,    0,    0,  291,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  291,
      291,  291,  291,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,    0,    0,    0,

        0,    0,  303,  303,  303,  303,  303,    0,    0,    0,
        0,    0,    0,    0,  303,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  303,
      303,  303,  303,  308,  308,  308,  309,  309,  309,  309,
      309,  309,  310,    0,  310,  310,  310,  310,  311,    0,
      311,  311,  311,  311,  312,  312,  312,  313,  313,  313,
      313,  314,  314,  314,  314,  315,  315,  315,  315,  315,
      315,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,

      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307,  307,  307,  307,  307,  307,  307,  307,  307,
      307,  307
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../luminia-qt5/src/editors/GlslLexer.lex"
/*! @file GlslLexer.lex
 * @brief Flex definitions for generating the GLSL lexer
 * @author Phil Rouse
 * @version 1.0
 * @date 07/05/2016
 */
#line 23 "../luminia-qt5/src/editors/GlslLexer.lex"
  #include "../lexerscheme.h"
#line 815 "/home/alex/Work/OpenSource/luminia-qt5/src/editors/generated/GlslLexer.cpp"
#line 816 "/home/alex/Work/OpenSource/luminia-qt5/src/editors/generated/GlslLexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 26 "../luminia-qt5/src/editors/GlslLexer.lex"


#line 960 "/home/alex/Work/OpenSource/luminia-qt5/src/editors/generated/GlslLexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 308 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 982 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
#line 29 "../luminia-qt5/src/editors/GlslLexer.lex"
case 2:
#line 30 "../luminia-qt5/src/editors/GlslLexer.lex"
case 3:
#line 31 "../luminia-qt5/src/editors/GlslLexer.lex"
case 4:
#line 32 "../luminia-qt5/src/editors/GlslLexer.lex"
case 5:
#line 33 "../luminia-qt5/src/editors/GlslLexer.lex"
case 6:
#line 34 "../luminia-qt5/src/editors/GlslLexer.lex"
case 7:
#line 35 "../luminia-qt5/src/editors/GlslLexer.lex"
case 8:
#line 36 "../luminia-qt5/src/editors/GlslLexer.lex"
case 9:
#line 37 "../luminia-qt5/src/editors/GlslLexer.lex"
case 10:
#line 38 "../luminia-qt5/src/editors/GlslLexer.lex"
case 11:
#line 39 "../luminia-qt5/src/editors/GlslLexer.lex"
case 12:
#line 40 "../luminia-qt5/src/editors/GlslLexer.lex"
case 13:
#line 41 "../luminia-qt5/src/editors/GlslLexer.lex"
case 14:
#line 42 "../luminia-qt5/src/editors/GlslLexer.lex"
case 15:
#line 43 "../luminia-qt5/src/editors/GlslLexer.lex"
case 16:
#line 44 "../luminia-qt5/src/editors/GlslLexer.lex"
case 17:
#line 45 "../luminia-qt5/src/editors/GlslLexer.lex"
case 18:
#line 46 "../luminia-qt5/src/editors/GlslLexer.lex"
case 19:
#line 47 "../luminia-qt5/src/editors/GlslLexer.lex"
case 20:
#line 48 "../luminia-qt5/src/editors/GlslLexer.lex"
case 21:
#line 49 "../luminia-qt5/src/editors/GlslLexer.lex"
case 22:
#line 50 "../luminia-qt5/src/editors/GlslLexer.lex"
case 23:
#line 51 "../luminia-qt5/src/editors/GlslLexer.lex"
case 24:
#line 52 "../luminia-qt5/src/editors/GlslLexer.lex"
case 25:
#line 53 "../luminia-qt5/src/editors/GlslLexer.lex"
case 26:
#line 54 "../luminia-qt5/src/editors/GlslLexer.lex"
case 27:
#line 55 "../luminia-qt5/src/editors/GlslLexer.lex"
case 28:
YY_RULE_SETUP
#line 55 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::KEYWORD; }
	YY_BREAK

case 29:
/* rule 29 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 58 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::DATATYPE; }
	YY_BREAK
case 30:
/* rule 30 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 59 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::DATATYPE; }
	YY_BREAK
case 31:
/* rule 31 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 60 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::DATATYPE; }
	YY_BREAK
case 32:
/* rule 32 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 61 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::DATATYPE; }
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 62 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::DATATYPE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 64 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::COMMENT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 65 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::MLC_START;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 66 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::MLC_END;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 67 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::HASHCOMMENT; }
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 68 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::WHITESPACE; }
	YY_BREAK
case 39:
#line 71 "../luminia-qt5/src/editors/GlslLexer.lex"
case 40:
#line 72 "../luminia-qt5/src/editors/GlslLexer.lex"
case 41:
#line 73 "../luminia-qt5/src/editors/GlslLexer.lex"
case 42:
#line 74 "../luminia-qt5/src/editors/GlslLexer.lex"
case 43:
#line 75 "../luminia-qt5/src/editors/GlslLexer.lex"
case 44:
#line 76 "../luminia-qt5/src/editors/GlslLexer.lex"
case 45:
YY_RULE_SETUP
#line 76 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::OPERATOR; }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 78 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::ILLEGAL; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 80 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::GLOBAL; } 
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 82 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::NUMBER; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 84 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::NUMBER; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 85 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::NUMBER; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 87 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::ILLEGAL; }
	YY_BREAK
case 52:
/* rule 52 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 89 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::FUNCTION; }
	YY_BREAK
case 53:
#line 92 "../luminia-qt5/src/editors/GlslLexer.lex"
case 54:
#line 93 "../luminia-qt5/src/editors/GlslLexer.lex"
case 55:
#line 94 "../luminia-qt5/src/editors/GlslLexer.lex"
case 56:
YY_RULE_SETUP
#line 94 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::DEFAULT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 98 "../luminia-qt5/src/editors/GlslLexer.lex"
{
                                yyleng = 1;
                                return LexerScheme::StyleType::ILLEGAL;
                              }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 102 "../luminia-qt5/src/editors/GlslLexer.lex"
{ return LexerScheme::StyleType::ILLEGAL; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 105 "../luminia-qt5/src/editors/GlslLexer.lex"
ECHO;
	YY_BREAK
#line 1260 "/home/alex/Work/OpenSource/luminia-qt5/src/editors/generated/GlslLexer.cpp"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 308 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 308 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 307);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 105 "../luminia-qt5/src/editors/GlslLexer.lex"


int yyFlexLexer::yywrap()   { return 1;}

