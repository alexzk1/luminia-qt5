#line 1 "/home/alex/Work/OpenSource/luminia-qt5/src/editors/generated/JsLexer.cpp"

#line 3 "/home/alex/Work/OpenSource/luminia-qt5/src/editors/generated/JsLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer JSFlexLexer

#ifdef yyalloc
#define JSalloc_ALREADY_DEFINED
#else
#define yyalloc JSalloc
#endif

#ifdef yyrealloc
#define JSrealloc_ALREADY_DEFINED
#else
#define yyrealloc JSrealloc
#endif

#ifdef yyfree
#define JSfree_ALREADY_DEFINED
#else
#define yyfree JSfree
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 73
#define YY_END_OF_BUFFER 74
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[446] =
    {   0,
       55,   55,   74,   72,   73,   52,   72,   73,   52,   73,
       55,   72,   73,   72,   73,   67,   72,   73,   55,   72,
       73,   55,   72,   73,   72,   73,   66,   72,   73,   55,
       72,   73,   55,   72,   73,   69,   72,   73,   55,   72,
       73,   64,   68,   72,   73,   55,   72,   73,   55,   72,
       73,   55,   72,   73,   67,   72,   73,   68,   72,   73,
       68,   72,   73,   68,   72,   73,   68,   72,   73,   68,
       72,   73,   68,   72,   73,   68,   72,   73,   68,   72,
       73,   68,   72,   73,   68,   72,   73,   68,   72,   73,
       68,   72,   73,   68,   72,   73,   68,   72,   73,   68,

       72,   73,   68,   72,   73,   68,   72,   73,   55,   72,
       73,   72,   73,   55,   46,   55,   56,   47,   51,   64,
       58,   50,   49,   65,   64,   64,   68,   68,   60,   55,
       60,   60,   59,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   11,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   22,   68,   68,   25,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   57,   71,
       60,   64,   64, 8240,16432,   49,   70,   64,   60,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   19,
       68,   68,   68,   68,   68, 8240,   68,16432,   68,   68,
       28,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   42,   68,   68,
     8240,   68,16432,   68,   68,   68,   68,   71, 8240,   68,
       68,   68,    3,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   13,   68,   14,   68,   68,   68,   68,   68,
       68,   68,   21,   68,   68,   68,   68, 8240,   65, 8240,
     8240,   68, 8240,   68,   68,   63,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   38,   68,   68,

       68,   61,   68,   68,   68,   68,   45,   68,   68,   68,
        2,   68,    4,   68,    5,   68,    6,   68,   68,   68,
       68,   68,   68,   68,   68,   62,   68,   17,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   35,   68,   68,   68,   39,   68,   68,   68,   68,
       44,   68,   68,   68,   68,   68,   68,   10,   68,   12,
       68,   15,   68,   68,   68,   68,   68,   24,   68,   68,
       68,   27,   68,   68,   68,   68,   32,   68,   33,   68,
       34,   68,   36,   68,   68,   40,   68,   68,   53,   68,
       68,   68,   68,   68,    9,   68,   16,   68,   18,   68,

       68,   68,   68,   68,   29,   68,   30,   68,   68,   68,
       68,   68,    1,   68,    7,   68,    8,   68,   20,   68,
       68,   68,   68,   68,   68,   68,   43,   68,   68,   68,
       26,   68,   31,   68,   68,   41,   68,   23,   68,   54,
       68,   68,   68,   37,   68
    } ;

static const flex_int16_t yy_accept[323] =
    {   0,
        1,    2,    3,    4,    6,    9,   11,   14,   16,   19,
       22,   25,   27,   30,   33,   36,   39,   42,   46,   49,
       52,   55,   58,   61,   64,   67,   70,   73,   76,   79,
       82,   85,   88,   91,   94,   97,  100,  103,  106,  109,
      112,  114,  115,  115,  116,  116,  117,  118,  118,  119,
      119,  120,  120,  121,  121,  122,  123,  124,  125,  126,
      128,  129,  130,  132,  133,  134,  134,  135,  136,  137,
      138,  139,  140,  141,  142,  143,  145,  146,  147,  148,
      149,  150,  151,  152,  153,  154,  156,  157,  159,  160,
      161,  162,  163,  164,  165,  166,  167,  168,  169,  170,

      171,  172,  173,  174,  175,  176,  177,  178,  179,  180,
      181,  182,  183,  184,  186,  187,  188,  189,  190,  191,
      192,  193,  194,  195,  196,  197,  198,  199,  200,  201,
      202,  203,  204,  205,  206,  207,  208,  209,  210,  212,
      213,  214,  215,  216,  219,  220,  221,  223,  224,  225,
      226,  227,  228,  229,  230,  231,  232,  233,  234,  235,
      236,  237,  238,  240,  241,  244,  245,  246,  247,  248,
      249,  250,  251,  252,  253,  255,  256,  257,  258,  259,
      260,  261,  262,  263,  265,  267,  268,  269,  270,  271,
      272,  273,  275,  276,  277,  278,  280,  281,  283,  285,

      286,  288,  289,  290,  291,  292,  293,  294,  295,  296,
      297,  298,  300,  301,  302,  304,  305,  306,  307,  309,
      310,  311,  313,  315,  317,  319,  320,  321,  322,  323,
      324,  325,  326,  328,  330,  331,  332,  333,  334,  335,
      336,  337,  338,  339,  340,  341,  342,  344,  345,  346,
      348,  349,  350,  351,  353,  354,  355,  356,  357,  358,
      360,  362,  364,  365,  366,  367,  368,  370,  371,  372,
      374,  375,  376,  377,  379,  381,  383,  385,  386,  388,
      389,  391,  392,  393,  394,  395,  397,  399,  401,  402,
      403,  404,  405,  407,  409,  410,  411,  412,  413,  415,

      417,  419,  421,  422,  423,  424,  425,  426,  427,  429,
      430,  431,  433,  435,  436,  438,  440,  442,  443,  444,
      446,  446
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,    7,    6,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    6,   18,
       19,   20,   21,    6,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       11,   23,   11,    7,    6,    1,   24,   25,   26,   27,

       28,   29,   30,   31,   32,   22,   33,   34,   35,   36,
       37,   38,   22,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   11,   48,   11,    6,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   49,    1,
       50,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,   51,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[52] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        1,    1,    1,    3,    1,    3,    1,    1,    1,    1,
        1,    4,    1,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[328] =
    {   0,
        0,    0,  272, 1027, 1027, 1027,  234,   47, 1027,  232,
       45,   45, 1027,   40,   44,   42,   50,   57,   56,  224,
       57,  223,   68,   69,   70,   71,   76,   78,   69,  105,
      108,  110,  107,  115,  118,  120,  138,  126,  157,   39,
      164,  189,  122, 1027,  204, 1027, 1027,   87, 1027,  198,
     1027,  125,   75,  184, 1027, 1027,    0, 1027,  177,  158,
      145,  171,  154,  150, 1027,  149,  146,  165,  166,  168,
      171,  173,  181,  182,  190,  189,  196,  203,  206,  212,
      213,  211,  218,  219,  220,  225,  227,  228,  240,  242,
      248,  250,  249,  256,  257,  263,  264,  271,  276,  277,

      284,  286,  289,  292,  297,  305,  302,  307, 1027,  109,
     1027,  137,   83,    0,    0,  117,  110, 1027,  312,  313,
      314,  330,  331,  336,  341,  342,  347,  350,  319,  353,
      358,  356,  355,  361,  363,  364,  375,  383,  386,  391,
      392,  398,  399,  440,  400,  401,  406,  409,  482,  483,
      484,  485,  490,  491,  492,  408,  493,  411,  498,  499,
      504,  507,  414,  513,   70,  510,  529,  532,  534,   23,
     1027,  535,  540,  537,  417,  542,  545,  547,  548,  553,
      550,  561,  562,  424,  567,  568,  576,  577,  579,  584,
      585,  587,  590,  596,  605, 1027,   50,  606,  607,  613,

      614,  620,  623,  622,  628,  629,  631,  638,  639,  641,
      644,  647,  649,  652,  655,  663,  666,  669,  671,  672,
      674,  677,  680,  685,  691,  692,  694,  699,  701,  702,
      700,  707,  708,  709,  717,  722,  725,  728,  730,  737,
      738,  736,  744,  746,  753,  759,  761,  764,  766,  769,
      772,  774,  780,  777,  782,  783,  788,  796,  797,  803,
      804,  806,  811,  812,  813,  818,  819,  821,  829,  826,
      827,  834,  835,  842,  847,  849,  850,  855,  856,  857,
      858,  863,  864,  865,  870,  872,  873,  880,  881,  886,
      888,  889,  894,  896,  897,  904,  909,  910,  916,  917,

      918,  919,  925,  927,  932,  934,  933,  939,  940,  941,
      942,  948,  949,  958,  959,  960,  965,  968,  973,  974,
     1027, 1005, 1009, 1011, 1015, 1019, 1022
    } ;

static const flex_int16_t yy_def[328] =
    {   0,
      321,    1,  321,  321,  321,  321,  321,  322,  321,  321,
      321,  323,  321,  321,  321,  321,  321,  324,  321,  321,
      321,  321,  324,  324,  324,  324,  324,  324,   26,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  321,
      321,  321,  322,  321,  322,  321,  321,  323,  321,  323,
      321,  321,  321,  321,  321,  321,  325,  321,  326,  324,
      324,  321,  321,  321,  321,  326,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,

      324,  324,  324,  324,  324,  324,  324,  324,  321,  321,
      321,  321,  321,  327,  325,  326,  321,  321,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  321,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  144,  324,  324,  324,  324,  321,
      321,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  321,  326,  324,  324,  324,

      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,

      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
        0,  321,  321,  321,  321,  321,  321
    } ;

static const flex_int16_t yy_nxt[1079] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       13,   14,   15,   16,   17,   18,    9,   19,   20,   21,
       22,   23,    9,   24,   25,   26,   27,   28,   29,   30,
       23,   31,   23,   32,   23,   33,   23,   34,   35,   36,
       37,   23,   38,   39,   23,   23,   23,   40,    4,    4,
       41,   44,   47,   49,   51,   54,   52,   46,   46,   53,
       55,   56,   46,   46,   57,  321,   58,   50,   46,   45,
       59,  170,   60,   62,   46,   46,   64,   58,   58,   58,
       58,   66,   66,   66,   66,   58,  109,   58,  112,   66,
      113,   66,   80,   67,   71,   49,  112,  198,  113,   61,

       81,   72,   82,   75,   73,   83,   68,   74,   69,   50,
       84,   77,   76,   78,   58,   70,   58,   58,   66,   58,
       66,   66,   79,   66,   58,  117,   44,   58,   66,   58,
       90,   66,  321,   66,   91,   58,   86,   52,   93,   66,
       53,   85,   87,   88,   45,   96,   89,   58,   92,  105,
       97,   66,  117,   94,   58,   58,   95,  170,   66,   66,
       98,   99,  106,  100,  321,  101,   58,   58,  102,  111,
       66,   59,  111,   60,   58,   58,  103,   58,   66,   66,
       58,   66,   58,  104,   66,  119,   66,  107,  108,  118,
       58,   58,  117,  121,   66,   66,  125,  114,   58,   58,

      321,  120,   66,   66,  126,   58,  321,  111,  122,   66,
      123,  124,   58,  110,  128,   58,   66,  127,  129,   66,
       58,   58,   58,  130,   66,   66,   66,   58,   58,   58,
      131,   66,   66,   66,   58,  132,   58,   58,   66,   65,
       66,   66,   63,  134,  133,  136,  135,  138,  137,   58,
       46,   58,   42,   66,  140,   66,  139,   58,   58,   58,
      141,   66,   66,   66,  142,   58,   58,  143,  144,   66,
       66,  321,   58,   58,  149,  145,   66,   66,  321,  321,
       58,  152,  146,  148,   66,   58,   58,  150,  321,   66,
       66,  147,  151,   58,  155,   58,  321,   66,   58,   66,

      154,   58,   66,  153,  321,   66,   58,  321,  157,  321,
       66,   58,  161,  156,   58,   66,   58,  159,   66,  158,
       66,   58,   58,   58,  160,   66,   66,   66,   58,  164,
      162,  321,   66,  168,  163,  165,  166,  174,  167,   58,
       58,  321,  181,   66,   66,   58,  173,  169,  321,   66,
       58,   58,  172,  321,   66,   66,   58,  165,  175,   58,
       66,  176,   58,   66,   58,   58,   66,   58,   66,   66,
       58,   66,   58,   58,   66,  321,   66,   66,  321,  165,
      182,  177,  183,  184,   58,  321,  178,  179,   66,  185,
      187,  180,   58,  321,  321,   58,   66,  186,  189,   66,

       58,   58,  321,  188,   66,   66,  190,   58,   58,   58,
       58,   66,   66,   66,   66,   58,  191,   58,   58,   66,
       58,   66,   66,   58,   66,  321,   58,   66,  192,  165,
       66,  193,  200,   58,  194,  209,  211,   66,  321,  195,
      171,  171,  201,  171,  171,  171,  171,  171,  171,  196,
      171,  171,  171,  197,  171,  198,  171,  171,  171,  171,
      171,  198,  171,  198,  198,  198,  198,  199,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  171,  171,  171,
      171,   58,   58,   58,   58,   66,   66,   66,   66,   58,

       58,   58,   58,   66,   66,   66,   66,   58,   58,  321,
      321,   66,   66,   58,  202,  321,   58,   66,  205,   58,
       66,  321,   58,   66,  204,  203,   66,  321,  321,  207,
      321,  206,  208,  210,  215,  213,  165,  212,   58,  214,
      216,   58,   66,   58,   58,   66,   58,   66,   66,   58,
       66,   58,  217,   66,   58,   66,   58,   58,   66,   58,
       66,   66,   58,   66,  219,  218,   66,  221,  321,  222,
       58,   58,  223,  220,   66,   66,   58,   58,  321,  226,
       66,   66,  227,  321,  224,   58,   58,  225,   58,   66,
       66,  228,   66,   58,   58,  230,   58,   66,   66,   58,

       66,  229,  321,   66,  233,   58,  231,  321,  321,   66,
      321,  232,  234,  321,   58,   58,   58,  236,   66,   66,
       66,  321,   58,   58,  165,  235,   66,   66,  238,   58,
      321,   58,   58,   66,  237,   66,   66,   58,   58,  321,
       58,   66,   66,  241,   66,  239,  242,   58,   58,  243,
       58,   66,   66,   58,   66,  240,   58,   66,   58,  244,
       66,   58,   66,  321,   58,   66,  248,  245,   66,  246,
      321,  165,   58,  321,  249,   58,   66,  247,   58,   66,
       58,   58,   66,   58,   66,   66,   58,   66,  321,   58,
       66,  251,  250,   66,   58,  255,  254,  256,   66,  252,

       58,   58,  321,   58,   66,   66,  253,   66,   58,   58,
       58,   58,   66,   66,   66,   66,   58,   58,   58,  321,
       66,   66,   66,  258,  321,  321,   58,  257,  260,  261,
       66,   58,  259,  263,   58,   66,  321,   58,   66,   58,
      262,   66,  264,   66,  321,   58,   58,   58,  265,   66,
       66,   66,  321,   58,  321,   58,  266,   66,  269,   66,
      321,  321,   58,  268,  270,  267,   66,  271,   58,  273,
       58,  274,   66,   58,   66,   58,  272,   66,   58,   66,
      321,   58,   66,   58,  276,   66,   58,   66,  275,   58,
       66,   58,   58,   66,  277,   66,   66,   58,  321,  321,

      321,   66,  281,  280,  278,   58,   58,  283,  279,   66,
       66,  282,   58,   58,  321,   58,   66,   66,  165,   66,
       58,   58,   58,  285,   66,   66,   66,   58,   58,  284,
       58,   66,   66,  321,   66,   58,   58,  286,   58,   66,
       66,  321,   66,   58,   58,  290,  291,   66,   66,  289,
      287,   58,  292,  321,  293,   66,   58,  288,   58,   58,
       66,  294,   66,   66,   58,   58,   58,   58,   66,   66,
       66,   66,   58,   58,   58,  295,   66,   66,   66,   58,
      321,   58,   58,   66,  297,   66,   66,  321,  321,   58,
       58,  296,  300,   66,   66,   58,  298,   58,   58,   66,

      321,   66,   66,   58,  299,   58,   58,   66,  301,   66,
       66,  321,  321,   58,  305,  304,  302,   66,   58,   58,
      321,  303,   66,   66,  306,   58,   58,   58,   58,   66,
       66,   66,   66,  321,   58,  321,   58,  309,   66,  307,
       66,   58,   58,   58,  308,   66,   66,   66,   58,   58,
       58,   58,   66,   66,   66,   66,  321,   58,   58,  312,
      313,   66,   66,  311,  314,  310,  321,   58,   58,   58,
      317,   66,   66,   66,   58,  321,  321,   58,   66,  315,
      316,   66,   58,   58,  321,  321,   66,   66,  321,  321,
      321,  321,  321,  321,  321,  319,  321,  321,  321,  320,

      321,  321,  321,  321,  318,   43,   43,   43,   43,   48,
       48,   48,   48,   61,   61,  115,  321,  115,  115,  116,
      116,  116,  171,  321,  171,  171,    3,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321
    } ;

static const flex_int16_t yy_chk[1079] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    8,   11,   12,   14,   16,   15,   40,   14,   15,
       16,   17,   15,   11,   17,  197,   18,   12,   17,    8,
       18,  170,   18,   19,   19,   21,   21,   23,   24,   25,
       26,   23,   24,   25,   26,   27,   40,   28,   53,   27,
       53,   28,   29,   24,   26,   48,  113,  165,  113,   29,

       29,   26,   29,   27,   26,   29,   25,   26,   25,   48,
       29,   28,   27,   28,   30,   25,   33,   31,   30,   32,
       33,   31,   28,   32,   34,  117,   43,   35,   34,   36,
       33,   35,  116,   36,   33,   38,   31,   52,   34,   38,
       52,   30,   31,   31,   43,   35,   32,   37,   33,   38,
       36,   37,  112,   34,   61,   67,   34,  110,   61,   67,
       36,   36,   38,   36,   66,   36,   39,   60,   37,   64,
       39,   60,   63,   60,   68,   69,   37,   70,   68,   69,
       71,   70,   72,   37,   71,   67,   72,   39,   39,   62,
       73,   74,   59,   69,   73,   74,   72,   54,   76,   75,

       50,   68,   76,   75,   73,   77,   45,   42,   70,   77,
       71,   71,   78,   41,   75,   79,   78,   74,   75,   79,
       82,   80,   81,   75,   82,   80,   81,   83,   84,   85,
       76,   83,   84,   85,   86,   77,   87,   88,   86,   22,
       87,   88,   20,   79,   78,   80,   79,   82,   81,   89,
       10,   90,    7,   89,   84,   90,   83,   91,   93,   92,
       85,   91,   93,   92,   87,   94,   95,   88,   88,   94,
       95,    3,   96,   97,   93,   89,   96,   97,    0,    0,
       98,   95,   90,   92,   98,   99,  100,   94,    0,   99,
      100,   91,   94,  101,   98,  102,    0,  101,  103,  102,

       97,  104,  103,   96,    0,  104,  105,    0,  100,    0,
      105,  107,  103,   99,  106,  107,  108,  102,  106,  101,
      108,  119,  120,  121,  102,  119,  120,  121,  129,  104,
      103,    0,  129,  107,  103,  105,  106,  121,  106,  122,
      123,    0,  129,  122,  123,  124,  120,  108,    0,  124,
      125,  126,  119,    0,  125,  126,  127,  122,  123,  128,
      127,  124,  130,  128,  133,  132,  130,  131,  133,  132,
      134,  131,  135,  136,  134,    0,  135,  136,    0,  125,
      130,  126,  131,  132,  137,    0,  127,  127,  137,  133,
      135,  128,  138,    0,    0,  139,  138,  134,  137,  139,

      140,  141,    0,  136,  140,  141,  138,  142,  143,  145,
      146,  142,  143,  145,  146,  147,  140,  156,  148,  147,
      158,  156,  148,  163,  158,    0,  175,  163,  141,  145,
      175,  142,  146,  184,  142,  156,  158,  184,    0,  143,
      144,  144,  148,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  149,  150,  151,  152,  149,  150,  151,  152,  153,

      154,  155,  157,  153,  154,  155,  157,  159,  160,    0,
        0,  159,  160,  161,  149,    0,  162,  161,  152,  166,
      162,    0,  164,  166,  151,  150,  164,    0,    0,  154,
        0,  153,  155,  157,  162,  160,  166,  159,  167,  161,
      164,  168,  167,  169,  172,  168,  174,  169,  172,  173,
      174,  176,  167,  173,  177,  176,  178,  179,  177,  181,
      178,  179,  180,  181,  169,  168,  180,  173,    0,  174,
      182,  183,  176,  172,  182,  183,  185,  186,    0,  179,
      185,  186,  180,    0,  177,  187,  188,  178,  189,  187,
      188,  181,  189,  190,  191,  183,  192,  190,  191,  193,

      192,  182,    0,  193,  188,  194,  186,    0,    0,  194,
        0,  187,  189,    0,  195,  198,  199,  193,  195,  198,
      199,    0,  200,  201,  190,  191,  200,  201,  195,  202,
        0,  204,  203,  202,  194,  204,  203,  205,  206,    0,
      207,  205,  206,  202,  207,  199,  203,  208,  209,  204,
      210,  208,  209,  211,  210,  200,  212,  211,  213,  205,
      212,  214,  213,    0,  215,  214,  210,  206,  215,  208,
        0,  207,  216,    0,  211,  217,  216,  209,  218,  217,
      219,  220,  218,  221,  219,  220,  222,  221,    0,  223,
      222,  214,  213,  223,  224,  220,  218,  221,  224,  216,

      225,  226,    0,  227,  225,  226,  217,  227,  228,  231,
      229,  230,  228,  231,  229,  230,  232,  233,  234,    0,
      232,  233,  234,  227,    0,    0,  235,  226,  229,  230,
      235,  236,  228,  232,  237,  236,    0,  238,  237,  239,
      231,  238,  234,  239,    0,  242,  240,  241,  235,  242,
      240,  241,    0,  243,    0,  244,  236,  243,  239,  244,
        0,    0,  245,  238,  240,  237,  245,  241,  246,  243,
      247,  244,  246,  248,  247,  249,  242,  248,  250,  249,
        0,  251,  250,  252,  246,  251,  254,  252,  245,  253,
      254,  255,  256,  253,  248,  255,  256,  257,    0,    0,

        0,  257,  252,  251,  249,  258,  259,  255,  250,  258,
      259,  253,  260,  261,    0,  262,  260,  261,  256,  262,
      263,  264,  265,  258,  263,  264,  265,  266,  267,  257,
      268,  266,  267,    0,  268,  270,  271,  259,  269,  270,
      271,    0,  269,  272,  273,  266,  268,  272,  273,  265,
      263,  274,  269,    0,  271,  274,  275,  264,  276,  277,
      275,  272,  276,  277,  278,  279,  280,  281,  278,  279,
      280,  281,  282,  283,  284,  273,  282,  283,  284,  285,
        0,  286,  287,  285,  280,  286,  287,    0,    0,  288,
      289,  278,  284,  288,  289,  290,  282,  291,  292,  290,

        0,  291,  292,  293,  283,  294,  295,  293,  285,  294,
      295,    0,    0,  296,  292,  291,  289,  296,  297,  298,
        0,  290,  297,  298,  295,  299,  300,  301,  302,  299,
      300,  301,  302,    0,  303,    0,  304,  298,  303,  296,
      304,  305,  307,  306,  297,  305,  307,  306,  308,  309,
      310,  311,  308,  309,  310,  311,    0,  312,  313,  305,
      306,  312,  313,  304,  307,  303,    0,  314,  315,  316,
      311,  314,  315,  316,  317,    0,    0,  318,  317,  308,
      310,  318,  319,  320,    0,    0,  319,  320,    0,    0,
        0,    0,    0,    0,    0,  318,    0,    0,    0,  319,

        0,    0,    0,    0,  314,  322,  322,  322,  322,  323,
      323,  323,  323,  324,  324,  325,    0,  325,  325,  326,
      326,  326,  327,    0,  327,  327,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321
    } ;

#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "../luminia-qt5/src/editors/JsLexer.lex"
/*! @file GlslLexer.lex
 * @brief Flex definitions for generating the GLSL lexer
 * @author Phil Rouse
 * @version 1.0
 * @date 07/05/2016
 */
#line 14 "../luminia-qt5/src/editors/JsLexer.lex"
  #include "../lexerscheme.h"
#line 825 "/home/alex/Work/OpenSource/luminia-qt5/src/editors/generated/JsLexer.cpp"
#line 826 "/home/alex/Work/OpenSource/luminia-qt5/src/editors/generated/JsLexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 17 "../luminia-qt5/src/editors/JsLexer.lex"


#line 967 "/home/alex/Work/OpenSource/luminia-qt5/src/editors/generated/JsLexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 322 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1027 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
#line 20 "../luminia-qt5/src/editors/JsLexer.lex"
case 2:
#line 21 "../luminia-qt5/src/editors/JsLexer.lex"
case 3:
#line 22 "../luminia-qt5/src/editors/JsLexer.lex"
case 4:
#line 23 "../luminia-qt5/src/editors/JsLexer.lex"
case 5:
#line 24 "../luminia-qt5/src/editors/JsLexer.lex"
case 6:
#line 25 "../luminia-qt5/src/editors/JsLexer.lex"
case 7:
#line 26 "../luminia-qt5/src/editors/JsLexer.lex"
case 8:
#line 27 "../luminia-qt5/src/editors/JsLexer.lex"
case 9:
#line 28 "../luminia-qt5/src/editors/JsLexer.lex"
case 10:
#line 29 "../luminia-qt5/src/editors/JsLexer.lex"
case 11:
#line 30 "../luminia-qt5/src/editors/JsLexer.lex"
case 12:
#line 31 "../luminia-qt5/src/editors/JsLexer.lex"
case 13:
#line 32 "../luminia-qt5/src/editors/JsLexer.lex"
case 14:
#line 33 "../luminia-qt5/src/editors/JsLexer.lex"
case 15:
#line 34 "../luminia-qt5/src/editors/JsLexer.lex"
case 16:
#line 35 "../luminia-qt5/src/editors/JsLexer.lex"
case 17:
#line 36 "../luminia-qt5/src/editors/JsLexer.lex"
case 18:
#line 37 "../luminia-qt5/src/editors/JsLexer.lex"
case 19:
#line 38 "../luminia-qt5/src/editors/JsLexer.lex"
case 20:
#line 39 "../luminia-qt5/src/editors/JsLexer.lex"
case 21:
#line 40 "../luminia-qt5/src/editors/JsLexer.lex"
case 22:
#line 41 "../luminia-qt5/src/editors/JsLexer.lex"
case 23:
#line 42 "../luminia-qt5/src/editors/JsLexer.lex"
case 24:
#line 43 "../luminia-qt5/src/editors/JsLexer.lex"
case 25:
#line 44 "../luminia-qt5/src/editors/JsLexer.lex"
case 26:
#line 45 "../luminia-qt5/src/editors/JsLexer.lex"
case 27:
#line 46 "../luminia-qt5/src/editors/JsLexer.lex"
case 28:
#line 47 "../luminia-qt5/src/editors/JsLexer.lex"
case 29:
#line 48 "../luminia-qt5/src/editors/JsLexer.lex"
case 30:
#line 49 "../luminia-qt5/src/editors/JsLexer.lex"
case 31:
#line 50 "../luminia-qt5/src/editors/JsLexer.lex"
case 32:
#line 51 "../luminia-qt5/src/editors/JsLexer.lex"
case 33:
#line 52 "../luminia-qt5/src/editors/JsLexer.lex"
case 34:
#line 53 "../luminia-qt5/src/editors/JsLexer.lex"
case 35:
#line 54 "../luminia-qt5/src/editors/JsLexer.lex"
case 36:
#line 55 "../luminia-qt5/src/editors/JsLexer.lex"
case 37:
#line 56 "../luminia-qt5/src/editors/JsLexer.lex"
case 38:
#line 57 "../luminia-qt5/src/editors/JsLexer.lex"
case 39:
#line 58 "../luminia-qt5/src/editors/JsLexer.lex"
case 40:
#line 59 "../luminia-qt5/src/editors/JsLexer.lex"
case 41:
#line 60 "../luminia-qt5/src/editors/JsLexer.lex"
case 42:
#line 61 "../luminia-qt5/src/editors/JsLexer.lex"
case 43:
#line 62 "../luminia-qt5/src/editors/JsLexer.lex"
case 44:
#line 63 "../luminia-qt5/src/editors/JsLexer.lex"
case 45:
YY_RULE_SETUP
#line 63 "../luminia-qt5/src/editors/JsLexer.lex"
{ return LexerScheme::StyleType::KEYWORD; }
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 65 "../luminia-qt5/src/editors/JsLexer.lex"
{return LexerScheme::StyleType::STRING;}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 66 "../luminia-qt5/src/editors/JsLexer.lex"
{return LexerScheme::StyleType::STRING;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 68 "../luminia-qt5/src/editors/JsLexer.lex"
{ return LexerScheme::StyleType::DATATYPE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 70 "../luminia-qt5/src/editors/JsLexer.lex"
{ return LexerScheme::StyleType::COMMENT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 71 "../luminia-qt5/src/editors/JsLexer.lex"
{ return LexerScheme::StyleType::MLC_START;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 72 "../luminia-qt5/src/editors/JsLexer.lex"
{ return LexerScheme::StyleType::MLC_END;}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 74 "../luminia-qt5/src/editors/JsLexer.lex"
{ return LexerScheme::StyleType::WHITESPACE; }
	YY_BREAK
case 53:
#line 77 "../luminia-qt5/src/editors/JsLexer.lex"
case 54:
#line 78 "../luminia-qt5/src/editors/JsLexer.lex"
case 55:
#line 79 "../luminia-qt5/src/editors/JsLexer.lex"
case 56:
#line 80 "../luminia-qt5/src/editors/JsLexer.lex"
case 57:
#line 81 "../luminia-qt5/src/editors/JsLexer.lex"
case 58:
#line 82 "../luminia-qt5/src/editors/JsLexer.lex"
case 59:
#line 83 "../luminia-qt5/src/editors/JsLexer.lex"
case 60:
YY_RULE_SETUP
#line 83 "../luminia-qt5/src/editors/JsLexer.lex"
{ return LexerScheme::StyleType::OPERATOR; }
	YY_BREAK
case 61:
#line 86 "../luminia-qt5/src/editors/JsLexer.lex"
case 62:
#line 87 "../luminia-qt5/src/editors/JsLexer.lex"
case 63:
#line 88 "../luminia-qt5/src/editors/JsLexer.lex"
case 64:
YY_RULE_SETUP
#line 88 "../luminia-qt5/src/editors/JsLexer.lex"
{ return LexerScheme::StyleType::NUMBER; }
	YY_BREAK
case 65:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 90 "../luminia-qt5/src/editors/JsLexer.lex"
{ return LexerScheme::StyleType::FUNCTION; }
	YY_BREAK
case 66:
#line 92 "../luminia-qt5/src/editors/JsLexer.lex"
case 67:
#line 93 "../luminia-qt5/src/editors/JsLexer.lex"
case 68:
#line 94 "../luminia-qt5/src/editors/JsLexer.lex"
case 69:
YY_RULE_SETUP
#line 94 "../luminia-qt5/src/editors/JsLexer.lex"
{ return LexerScheme::StyleType::DEFAULT; }
	YY_BREAK
case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 96 "../luminia-qt5/src/editors/JsLexer.lex"
{ return LexerScheme::StyleType::ILLEGAL; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 99 "../luminia-qt5/src/editors/JsLexer.lex"
{
                                yyleng = 1;
                                return LexerScheme::StyleType::ILLEGAL;
                              }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 103 "../luminia-qt5/src/editors/JsLexer.lex"
{ return LexerScheme::StyleType::ILLEGAL; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 106 "../luminia-qt5/src/editors/JsLexer.lex"
ECHO;
	YY_BREAK
#line 1251 "/home/alex/Work/OpenSource/luminia-qt5/src/editors/generated/JsLexer.cpp"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = new yy_state_type[YY_STATE_BUF_SIZE];

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree( yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree( yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 322 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 322 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 321);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	if( ! input_file ) {
		input_file = &yyin;
	}
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 106 "../luminia-qt5/src/editors/JsLexer.lex"


int yyFlexLexer::yywrap()   { return 1;}

